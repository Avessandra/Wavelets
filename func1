f(t) = sin3t + 0.8 sin 10t  for t in range [0,10]

import numpy
from math import *

N = 4
s = [5,1,2,8]

#for k in range(N):
#    print(s[k])

print(s)

def discreteHaarWaveletTransform(x):
    N = len(x)
    output = [0.0]*N

    length = N >> 1
    while True:
        for i in range(0,length):
            avg = (x[i * 2] + x[i * 2 + 1])/2
            diff = (x[i * 2] - x[i * 2 + 1])/2
            output[i] = avg
            output[length + i] = diff

        if length == 1:
            return output

        #Swap arrays to do next iteration
        #System.arraycopy(output, 0, x, 0, length << 1)
        x = output[:length << 1]

        length >>= 1


import numpy
from math import *

N = 16
s = [25.9375,11.0,-4.0,-9.0,-4.625,4.5,-1.75,2.0,3.6875,-3.0,3.75,4.5,-5.0,-0.5,-3.75,3.0]

#for k in range(N):
#    print(s[k])

print(s)

import matplotlib.pyplot as plt
plt.plot(s)
plt.axis([0, 16, -10, 20])
plt.show()

def fun1(ax):
    ax.plot(range(5))

def fun2(ax):
    ax.plot(range(5)[::-1])


fig, ax = plt.subplots(1, 1)

fun1(ax)
fun2(ax)

plt.draw()

def discreteHaarWaveletTransform(x):
    N = len(x)
    output = [0.0]*N

    length = N >> 1
    while True:
        for i in range(0,length):
            avg = (x[i * 2] + x[i * 2 + 1])/2
            diff = (x[i * 2] - x[i * 2 + 1])/2
            output[i] = avg
            output[length + i] = diff

        if length == 1:
            return output

        #Swap arrays to do next iteration
        #System.arraycopy(output, 0, x, 0, length << 1)
        x = output[:length << 1]

        length >>= 1


s = discreteHaarWaveletTransform(s)

for k in range(N):
    print (s[k])
    
import matplotlib.pyplot as plt
plt.plot(s)
plt.axis([0, 10, -4, 13])
plt.show()


s = discreteHaarWaveletTransform(s)

for k in range(N):
    print (s[k])
